group TestGenerator;

deflt(elem) ::= <<
    <elem; separator="\n">
>>
combinedTemplate(content) ::= <<
<content; separator="\n">
>>

initTestMethod(name, request, assert, close) ::= <<
    @Test
    void <name>() {
        given()
<request>
<assert>
    }
>>


baseUri(uri) ::= <<
                .baseUri("<uri>")
>>
port(port) ::= <<
                .port(<port>)
>>
basePath(path) ::= <<
                .basePath("<path>")
>>

requestFullAddress(uri, port, path) ::= <<
<baseUri(uri)>
<port(port)>
<basePath(path)>
>>

requestAddress(uri, path) ::= <<
<baseUri(uri)>
<basePath(path)>
>>

requestHeaders(headerKey, headerValue) ::= <<
                .header("<headerKey>", "<headerValue>")
>>

getRequest(path) ::= <<
            .when()
                .get("<path>")
            .then()
>>
postRequest(path) ::= <<
            .when()
                .post("<path>")
            .then()
>>
putRequest(path) ::= <<
            .when()
                .put("<path>")
            .then()
>>
patchRequest(path) ::= <<
            .when()
                .patch("<path>")
            .then()
>>
deleteRequest(path) ::= <<
            .when()
                .delete("<path>")
            .then()
>>

makeRequest(request, headers, method) ::= <<
<request>
<headers>
<method>
>>


assertStatusCode(code) ::= <<
                .statusCode(<code>)
>>
assertBodyContains(prop) ::= <<
                .body(containsString("<prop>"))
>>
assertBodyExact(prop, value) ::= <<
                .body("<prop>", equalTo("<value>"))
>>
assertResponseHeader(header, value) ::= <<
                .header("<header>", containsString("<value>"))
>>

validateRequest(responseCodeAssertion, responseBodyAssertions, responseHeadersAssertions) ::= <<
<responseCodeAssertion>
<responseBodyAssertions>
<responseHeadersAssertions>
>>
